{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialCartItems = {\n  'Test Item': {\n    title: 'Test Item',\n    quantity: 3,\n    total: 18,\n    price: 6\n  },\n  'Test Item2': {\n    title: 'Test Item2',\n    quantity: 3,\n    total: 30,\n    price: 10\n  }\n};\nexport const cartItemsSlice = createSlice({\n  name: 'cartItems',\n  initialState: initialCartItems,\n  reducers: {\n    increment(state, title) {\n      state[title.payload].quantity++;\n    },\n    decrement(state, title) {\n      if (state[title.payload].quantity <= 1) {\n        const newCartItems = Object.entries(state).map(([title, cartItem]) => console.log(cartItem));\n        // const newCartItems = Object.entries(state).filter(([title, cartItem]) => cartItem.title !== title.payload);\n        // var newCartItems = {};\n        // newCartItems = Object.entries(state).filter(([title, cartItem]) => cartItem.title !== title.payload)\n        //     .reduce((key, newState) => { console.log(key); return newState[key]; }, {});\n\n        console.log(newCartItems);\n\n        // console.log(state[title.payload]);\n        // state = undefined;\n        // const newCartItems = Object.fromEntries(\n        //     Object.entries(state).filter(([title, cartItem]) => cartItem.title !== title.payload)\n        //         .reduce((newState, key) =>\n        //         {\n        //             console.log(key);\n        //             console.log(newState);\n        //             state[key] = newState[key];\n        //             return newState;\n        //         }, {}\n        //     ));\n        //     const testState = state[title.payload];\n        //     console.log(testState);\n        // state = newCartItems;\n\n        // .reduce((prevState,q) => {\n        //     // newCartItems[key] = prevState[key];\n        //     console.log(prevState);\n        //     // return newCartItems;\n        // }, {});\n        // console.log(newCartItems);\n\n        // const newCart = Object.keys(state).filter(key =>\n        //     key !== title.payload).reduce((newState, key) =>\n        //     {\n        //         newState[key] = state[key];\n        //         return newState;\n        //     }, {}\n        // );\n        // console.log(newCartItems);\n        // Object.keys(state).state.splice(state[title.payload], 1);\n      } else {\n        state[title.payload].quantity--;\n      }\n    },\n    addToCart(state, product) {\n      const cartKey = product.payload.title;\n      if (state[cartKey] === undefined) {\n        const newCartItem = product.payload;\n        newCartItem.quantity = 1;\n        newCartItem.total = product.payload.price;\n        state[cartKey] = newCartItem;\n      } else {\n        state[cartKey].quantity++;\n        state[cartKey].total = state[cartKey].quantity * state[cartKey].price;\n      }\n    }\n  }\n});","map":{"version":3,"names":["createSlice","initialCartItems","title","quantity","total","price","cartItemsSlice","name","initialState","reducers","increment","state","payload","decrement","newCartItems","Object","entries","map","cartItem","console","log","addToCart","product","cartKey","undefined","newCartItem"],"sources":["/Users/greg/Documents/Learning React/redux-cart-app/src/store/cartItems.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst initialCartItems = {\n    'Test Item': { title: 'Test Item', quantity: 3, total: 18, price: 6 },\n    'Test Item2': { title: 'Test Item2', quantity: 3, total: 30, price: 10 }\n};\n\nexport const cartItemsSlice = createSlice({\n    name: 'cartItems',\n    initialState: initialCartItems,\n    reducers: {\n        increment(state, title){\n            state[title.payload].quantity++;\n        },\n        decrement(state, title){\n            if(state[title.payload].quantity <= 1){\n\n                const newCartItems = Object.entries(state).map(([title, cartItem]) => (console.log(cartItem)));\n                // const newCartItems = Object.entries(state).filter(([title, cartItem]) => cartItem.title !== title.payload);\n                // var newCartItems = {};\n                // newCartItems = Object.entries(state).filter(([title, cartItem]) => cartItem.title !== title.payload)\n                //     .reduce((key, newState) => { console.log(key); return newState[key]; }, {});\n\n                    console.log(newCartItems);\n\n                // console.log(state[title.payload]);\n                // state = undefined;\n                // const newCartItems = Object.fromEntries(\n                //     Object.entries(state).filter(([title, cartItem]) => cartItem.title !== title.payload)\n                //         .reduce((newState, key) =>\n                //         {\n                //             console.log(key);\n                //             console.log(newState);\n                //             state[key] = newState[key];\n                //             return newState;\n                //         }, {}\n                //     ));\n                //     const testState = state[title.payload];\n                //     console.log(testState);\n                // state = newCartItems;\n                \n                    // .reduce((prevState,q) => {\n                    //     // newCartItems[key] = prevState[key];\n                    //     console.log(prevState);\n                    //     // return newCartItems;\n                    // }, {});\n// console.log(newCartItems);\n                \n                // const newCart = Object.keys(state).filter(key =>\n                //     key !== title.payload).reduce((newState, key) =>\n                //     {\n                //         newState[key] = state[key];\n                //         return newState;\n                //     }, {}\n                // );\n                // console.log(newCartItems);\n                // Object.keys(state).state.splice(state[title.payload], 1);\n            } else {\n                state[title.payload].quantity--;\n            }\n        },\n        addToCart(state, product){\n            const cartKey = product.payload.title;\n            if(state[cartKey] === undefined){\n                const newCartItem = product.payload;\n                newCartItem.quantity = 1;\n                newCartItem.total = product.payload.price;\n                state[cartKey] = newCartItem;\n            } else {\n                state[cartKey].quantity++;\n                state[cartKey].total = state[cartKey].quantity * state[cartKey].price;\n            }\n        }\n    }\n});"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,gBAAgB,GAAG;EACrB,WAAW,EAAE;IAAEC,KAAK,EAAE,WAAW;IAAEC,QAAQ,EAAE,CAAC;IAAEC,KAAK,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAE,CAAC;EACrE,YAAY,EAAE;IAAEH,KAAK,EAAE,YAAY;IAAEC,QAAQ,EAAE,CAAC;IAAEC,KAAK,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAG;AAC3E,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGN,WAAW,CAAC;EACtCO,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAEP,gBAAgB;EAC9BQ,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAET,KAAK,EAAC;MACnBS,KAAK,CAACT,KAAK,CAACU,OAAO,CAAC,CAACT,QAAQ,EAAE;IACnC,CAAC;IACDU,SAASA,CAACF,KAAK,EAAET,KAAK,EAAC;MACnB,IAAGS,KAAK,CAACT,KAAK,CAACU,OAAO,CAAC,CAACT,QAAQ,IAAI,CAAC,EAAC;QAElC,MAAMW,YAAY,GAAGC,MAAM,CAACC,OAAO,CAACL,KAAK,CAAC,CAACM,GAAG,CAAC,CAAC,CAACf,KAAK,EAAEgB,QAAQ,CAAC,KAAMC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAE,CAAC;QAC9F;QACA;QACA;QACA;;QAEIC,OAAO,CAACC,GAAG,CAACN,YAAY,CAAC;;QAE7B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEI;QACA;QACA;QACA;QACA;QACpB;;QAEgB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACJ,CAAC,MAAM;QACHH,KAAK,CAACT,KAAK,CAACU,OAAO,CAAC,CAACT,QAAQ,EAAE;MACnC;IACJ,CAAC;IACDkB,SAASA,CAACV,KAAK,EAAEW,OAAO,EAAC;MACrB,MAAMC,OAAO,GAAGD,OAAO,CAACV,OAAO,CAACV,KAAK;MACrC,IAAGS,KAAK,CAACY,OAAO,CAAC,KAAKC,SAAS,EAAC;QAC5B,MAAMC,WAAW,GAAGH,OAAO,CAACV,OAAO;QACnCa,WAAW,CAACtB,QAAQ,GAAG,CAAC;QACxBsB,WAAW,CAACrB,KAAK,GAAGkB,OAAO,CAACV,OAAO,CAACP,KAAK;QACzCM,KAAK,CAACY,OAAO,CAAC,GAAGE,WAAW;MAChC,CAAC,MAAM;QACHd,KAAK,CAACY,OAAO,CAAC,CAACpB,QAAQ,EAAE;QACzBQ,KAAK,CAACY,OAAO,CAAC,CAACnB,KAAK,GAAGO,KAAK,CAACY,OAAO,CAAC,CAACpB,QAAQ,GAAGQ,KAAK,CAACY,OAAO,CAAC,CAAClB,KAAK;MACzE;IACJ;EACJ;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}